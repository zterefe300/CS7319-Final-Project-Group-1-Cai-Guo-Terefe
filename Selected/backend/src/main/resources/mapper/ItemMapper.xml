<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.selected.inventory_dashboard.persistence.dao.ItemMapper">
  <resultMap id="BaseResultMap" type="com.selected.inventory_dashboard.persistence.entity.Item">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="detail" jdbcType="VARCHAR" property="detail" />
    <result column="pics" jdbcType="VARCHAR" property="pics" />
    <result column="alarm_threshold" jdbcType="INTEGER" property="alarmThreshold" />
    <result column="quantity_threshold" jdbcType="INTEGER" property="quantityThreshold" />
    <result column="vendor_id" jdbcType="INTEGER" property="vendorId" />
    <result column="reorder_quantity" jdbcType="INTEGER" property="reorderQuantity" />
    <result column="effective_date" jdbcType="TIMESTAMP" property="effectiveDate" />
  </resultMap>

  <resultMap id="BaseResultMap_QUANTITY" type="com.selected.inventory_dashboard.dtovo.res.ItemAndQty">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="detail" jdbcType="VARCHAR" property="detail" />
    <result column="pics" jdbcType="VARCHAR" property="pics" />
    <result column="alarm_threshold" jdbcType="INTEGER" property="alarmThreshold" />
    <result column="quantity_threshold" jdbcType="INTEGER" property="quantityThreshold" />
    <result column="vendor_id" jdbcType="INTEGER" property="vendorId" />
    <result column="quantity" property="quantity" />
    <result column="reorder_quantity" jdbcType="INTEGER" property="reorderQuantity" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from item
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.selected.inventory_dashboard.persistence.entity.Item" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    insert into item (name, detail, pics, 
      alarm_threshold, quantity_threshold, vendor_id, 
      effective_date, reorder_quantity)
    values (#{name,jdbcType=VARCHAR}, #{detail,jdbcType=VARCHAR}, #{pics,jdbcType=VARCHAR}, 
      #{alarmThreshold,jdbcType=INTEGER}, #{quantityThreshold,jdbcType=INTEGER}, #{vendorId,jdbcType=INTEGER}, 
      #{effectiveDate,jdbcType=TIMESTAMP},#{reorderQuantity,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.selected.inventory_dashboard.persistence.entity.Item">
    update item
    set name = #{name,jdbcType=VARCHAR},
      detail = #{detail,jdbcType=VARCHAR},
      pics = #{pics,jdbcType=VARCHAR},
      alarm_threshold = #{alarmThreshold,jdbcType=INTEGER},
      quantity_threshold = #{quantityThreshold,jdbcType=INTEGER},
      vendor_id = #{vendorId,jdbcType=INTEGER},
      effective_date = #{effectiveDate,jdbcType=TIMESTAMP},
      reorder_quantity=#{reorderQuantity,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, name, detail, pics, alarm_threshold, quantity_threshold, vendor_id, effective_date,reorder_quantity
    from item
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, name, detail, pics, alarm_threshold, quantity_threshold, vendor_id, effective_date,reorder_quantity
    from item
  </select>

  <select id="selectLimit" parameterType="java.lang.Integer"  resultMap="BaseResultMap">
    select id, name, detail, pics, alarm_threshold, quantity_threshold, vendor_id, effective_date,reorder_quantity
    from item limit #{limit}
  </select>


  <select id="findAllBelowQtyThreshold" resultMap="BaseResultMap">
    select item.*,stock_record.quantity from item left join stock_record on item.id=stock_record.item_id
    where <![CDATA[stock_record.quantity < item.quantity_threshold ]]>
  </select>
  <select id="findAllBelowAlarmThreshold" resultMap="BaseResultMap">
    select item.*,stock_record.quantity from item left join stock_record on item.id=stock_record.item_id
    where <![CDATA[stock_record.quantity < item.alarm_threshold ]]>
  </select>
</mapper>